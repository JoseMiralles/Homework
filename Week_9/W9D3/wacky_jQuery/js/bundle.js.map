{"version":3,"sources":["./js/main.js","./js/view.js","webpack/bootstrap"],"names":["View","$el","this","setupEasel","window","_randomColorString","Math","random","toString","substr","prototype","exercise0","$","removeClass","exercise1","addClass","exercise2","remove","exercise3","append","exercise4","each","i","text","exercise5","click","alert","attr","exercise6","css","exercise7","hover","console","log","$addRowButton","html","on","addRow","bind","j","$button","rowIdx","find","length","$row","colIdx","$square","e","currentTarget","module","exports","__webpack_module_cache__","__webpack_require__","moduleId","__webpack_modules__","$easel"],"mappings":"UAEIA,E,WCAJ,SAASA,EAAKC,GACZC,KAAKD,IAAMA,EACXC,KAAKC,aAGPC,OAAOC,mBAAqB,WAC1B,MAAO,IAAMC,KAAKC,SAASC,SAAS,IAAIC,QAAQ,IAGlDT,EAAKU,UAAUC,UAAY,WAMzBC,EAAE,MAAMC,YAAY,WAGtBb,EAAKU,UAAUI,UAAY,WAKzBF,EAAE,WAAWG,SAAS,WAGxBf,EAAKU,UAAUM,UAAY,WAKzBJ,EAAE,WAAWK,UAGfjB,EAAKU,UAAUQ,UAAY,WAKzBN,EAAE,QAAQO,OAAOP,EAAE,4BAGrBZ,EAAKU,UAAUU,UAAY,WAKzBR,EAAE,WAAWS,MAAK,SAASC,GACrBA,EAAI,GAAM,GAAGV,EAAEV,MAAMqB,KAAK,YAIlCvB,EAAKU,UAAUc,UAAY,WAUzBZ,EAAE,WAAWa,OAAM,WACjBC,MAAMd,EAAEV,MAAMyB,KAAK,iBAIvB3B,EAAKU,UAAUkB,UAAY,WAQzBhB,EAAE,WAAWS,MAAK,WAChBT,EAAEV,MAAM2B,IAAI,aAAczB,OAAOC,0BAIrCL,EAAKU,UAAUoB,UAAY,WAQzBlB,EAAE,WAAWS,MAAK,WAChBT,EAAEV,MAAM6B,OAAM,WACZC,QAAQC,IAAKrB,EAAEV,MAAM2B,IAAI,4BAO/B7B,EAAKU,UAAUP,WAAa,WAC1B,MAAM+B,EAAgBtB,EAAE,YAAYuB,KAAK,aACzCjC,KAAKD,IAAIkB,OAAOe,GAChBA,EAAcE,GAAG,QAASlC,KAAKmC,OAAOC,KAAKpC,OAE3C,IAAI,IAAIqC,EAAI,EAAGA,GAAK,EAAGA,IAAI,CACzB,MAAMC,EAAU5B,EAAE,YAAYuB,KAAK,YAAcI,GACjDC,EAAQJ,GAAG,QAASlC,KAAK,WAAaqC,IACtCrC,KAAKD,IAAIkB,OAAOqB,GAGlB,IAAI,IAAIlB,EAAI,EAAGA,EAAI,GAAIA,IACrBpB,KAAKmC,UAITrC,EAAKU,UAAU2B,OAAS,WACtB,MAAMI,EAASvC,KAAKD,IAAIyC,KAAK,QAAQC,OAC/BC,EAAOhC,EAAE,QAAQG,SAAS,OAAOA,SAAS,SAChD,IAAI,IAAI8B,EAAS,EAAGA,EAAS,GAAIA,IAAU,CACzC,MAAMC,EAAUlC,EAAE,QAAQG,SAAS,UAAUY,KAAK,WAAY,CAACc,EAAQI,IACvEC,EAAQV,GAAG,cAAeW,IACRnC,EAAEmC,EAAEC,eACZnB,IAAI,mBAAoBzB,OAAOC,yBAEzCuC,EAAKzB,OAAO2B,GAEd5C,KAAKD,IAAIkB,OAAOyB,IAGlBK,EAAOC,QAAUlD,IChIbmD,EAA2B,GFC3BnD,EEEJ,SAASoD,EAAoBC,GAE5B,GAAGF,EAAyBE,GAC3B,OAAOF,EAAyBE,GAAUH,QAG3C,IAAID,EAASE,EAAyBE,GAAY,CAGjDH,QAAS,IAOV,OAHAI,EAAoBD,GAAUJ,EAAQA,EAAOC,QAASE,GAG/CH,EAAOC,QFlBJ,CAAQ,KAEnBtC,GAAE,WACA,IAAI2C,EAAS3C,EAAE,UACf,IAAIZ,EAAKuD,O","file":"bundle.js","sourcesContent":["/* globals $ */\n\nvar View = require(\"./view\");\n\n$(function () {\n  var $easel = $(\"#easel\");\n  new View($easel);\n});\n","/* jshint esversion: 6 */\n\nfunction View($el) {\n  this.$el = $el;\n  this.setupEasel();\n}\n\nwindow._randomColorString = function(){\n  return '#' + Math.random().toString(16).substr(-6);\n};\n\nView.prototype.exercise0 = function () {\n  //Challenge: (example) remove the 'square' class from every li\n  //Result: this should cause the grid to turn into a long list of undecorated lis\n  //just a list of dots\n\n  //this one completed as an example :) no additional code necessary\n  $('li').removeClass(\"square\");\n};\n\nView.prototype.exercise1 = function () {\n  //Challenge: Give every square the class 'orange'\n  //Result: Every square should turn orange (we already have a CSS rule)\n\n  //your code here!\n  $(\".square\").addClass(\"orange\");\n};\n\nView.prototype.exercise2 = function () {\n  //Challenge: Remove every square\n  //Result: Every square vanishes\n\n  //your code here!\n  $(\".square\").remove();\n};\n\nView.prototype.exercise3 = function () {\n  //Challenge: Add an <h1> with the text 'i love jquery' under the grid.\n  //Result: An <h1> with the text 'i love jquery' appears under the grid.\n\n  //your code here!\n  $(\"body\").append($(\"<h1>i love jquery</h1>\"));\n};\n\nView.prototype.exercise4 = function () {\n  //Challenge: Write your first name in every other square.\n  //Result: Your name appears in every other square.\n\n  //your code here!\n  $(\".square\").each(function(i){\n    if (i % 2 === 0) $(this).text(\"test\");\n  });\n};\n\nView.prototype.exercise5 = function () {\n  //Challenge: Alert the row and column of the square, when the square is clicked.\n  //Result: When a square is clicked, the row and column appear in an alert. for\n  //example: clicking the top left square should alert '0, 0'.\n\n  //hint: checkout the addRow function at the bottom of the file: we set the\n  //  'data-pos' of every square\n\n  //your code here!\n  let square;\n  $(\".square\").click(function(){\n    alert($(this).attr(\"data-pos\"));\n  });\n};\n\nView.prototype.exercise6 = function () {\n  //Challenge: Give every square a random color!\n  //Result: Every square becomes a color as soon as this code runs. The grid\n  //should become a beautiful rainbow of colors.\n\n  //hint: use window._randomColorString() (defined at top) to get a random color!\n\n  //your code here!\n  $(\".square\").each(function(){\n    $(this).css(\"background\", window._randomColorString());\n  });\n};\n\nView.prototype.exercise7 = function(){\n  //Challenge: When your mouse goes over a square, console log its color.\n  //Result: When the mouse goes over a square its color should appear in the\n  //console. The color won't be the color's name, but its rbg value.\n  //You should push the button for exercise 6 first to try it on the\n  //rainbow.\n\n  //your code here!\n  $(\".square\").each(function(){\n    $(this).hover(function(){\n      console.log( $(this).css(\"background-color\") );\n    });\n  });\n};\n\n\n\nView.prototype.setupEasel = function() {\n  const $addRowButton = $('<button>').html('Add a row');\n  this.$el.append($addRowButton);\n  $addRowButton.on(\"click\", this.addRow.bind(this));\n\n  for(let j = 0; j <= 7; j++){\n    const $button = $(\"<button>\").html(\"Exercise \" + j);\n    $button.on(\"click\", this[\"exercise\" + j]);\n    this.$el.append($button);\n  }\n\n  for(let i = 0; i < 20; i ++) {\n    this.addRow();\n  }\n};\n\nView.prototype.addRow = function() {\n  const rowIdx = this.$el.find(\".row\").length;\n  const $row = $(\"<ul>\").addClass(\"row\").addClass(\"group\");\n  for(let colIdx = 0; colIdx < 20; colIdx++) {\n    const $square = $(\"<li>\").addClass(\"square\").attr(\"data-pos\", [rowIdx, colIdx]);\n    $square.on(\"mouseenter\", (e) => {\n      const $square = $(e.currentTarget);\n      $square.css(\"background-color\", window._randomColorString());\n    });\n    $row.append($square);\n  }\n  this.$el.append($row);\n};\n\nmodule.exports = View;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n"],"sourceRoot":""}